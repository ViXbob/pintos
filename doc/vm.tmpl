            +---------------------------+
            |          CS 140          |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Wenchao Li  <liwch1@shanghaitech.edu.cn>

Haoyu   He  <hehy@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


/* page.h */
typedef struct hash sup_page_table;
enum sup_page_status
{
  INVALID,
  IN_MEMORY,
  IN_SWAP,
  IN_FILESYS,
};
struct sup_page_table_entry
{
  void *addr;                  /* Virtual address. */
  enum sup_page_status status; /* Page status. */
  struct frame_table_entry
      *frame_table_entry; /* Corresponding frame table entry. */
  uint64_t access_time;  /* Lastest time the page is accessed. Used for LRU. */
  struct hash_elem elem; /* Hash table element. */
  bool writable;         /* Whether this page can be written. */
  bool dirty;            /* Whether this page is dirty. */
  int ref_bit;           /* Clock reference bit. */
  /* Used for swap. */
  int swap_index; /* Index of the beginning sector in swap file. */
  /* Used for file load. */
  struct file *file;   /* File it belongs. */
  int32_t offset;      /* File offset. */
  uint32_t read_bytes; /* Number of bytes read from file. */
  uint32_t zero_bytes; /* Number of zero bytes at the end of page. */
  /* Used for mmap. */
  bool is_mmap;     /* Whether this page is mmap. */
  struct lock lock; /* Page lock. */
};



---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

From a page, we know its user virtual address which can search in hash table 
with O(1) time complexity if this process page is mapped to one frame. 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

There are only user virtual address in SPT.
Accessing user data through user virtual address only can avoid this issue.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Before we process a frame, we should acquire a global lock first, 
which is defined in `frame.c`. We guarantee that there is 
at most one process allocating this frame in one time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Because pintos includes a hash table data structure which efficiently 
support insertions and deletions over a wide range of table sizes. 
We even renamed hash table sup_page_table `typedef struct hash sup_page_table`
When we mapping virtual memory to physical memory, it is suitable for hash table.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* frame.h */
struct frame_table_entry
{
  void *frame_addr;     /* Virtual address this frame holds. */
  struct thread *owner; /* Owner of this frame. */
  struct sup_page_table_entry *
      sup_page_table_entry; /* Corresponding supplementary page table entry. */
  struct list_elem elem;    /* List element in frame table. */
  struct lock lock;         /* Frame table entry lock. */
};
/* frame.c */
/* Frame table lock, you should lock when using frame list. */
struct lock frame_table_lock;  
/* Frame list which stores all frame table entries. */
struct list frame_table_list;  

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We have two ways to solve this question, LRU and clock-algorithm.
In LRU, we sort frame_table_entry and evict the least recently used one.
In clock algorithm, traversing the entire list of frame_table, a pointer 
indicates the next frame to replace, and when a frame is needed, the pointer 
advances until it finds a frame with a `ref_bit' of 0. In other words, 
give each one two chances.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Before P obtains the frame, evict this frame using `pagedir_clear_page`, 
this will remove Q’s reference to the frame. The process Q will then 
be able to learn from the page table that it no longer owns the page.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Check whether it is that kernel thread access user memory during syscall. 
If page is not found, grow stack. If fault_address is a user virtual address 
that is 32 bytes lower than esp, it will be recognized as an invalid 
virtual address, otherwise the stack will be extended by one page.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

The frame table is global and sup_page_table is owned by each process. 
There is a lock in each `sup_page_table_entry`, before we acquire the 
file lock, we acquire the lock in sup_page_table_entry first to avoid 
different procss using the same sup_page_table_entry which will lead 
a deadlock. We won’t have a situation like holding one lock and acquire 
another lock, which means no deadlock. 
And the file_sys lock has proved by project2 userprog.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

First, each sup_page_table_entry has a lock and before we evict a page, 
we acquire the lock.
Actually the page can access the page, we will store it into the 
swap partition. And a global lock `swap_slot_table_lock` used here, 
when we have a swap processing, aquire this lock first.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

First, each frame_table_entry has a lock and before we evict a frame
page, we will try_acquire_lock. 
If a process needs to read data from a file system or swap, it will 
acquire the frame_table_entry->lock, and this frame page won't be 
interfered and evicted.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

Yes. We do not load page before we actually use them.
If page fault happen, we will check 
whether it is that kernel thread access user memory during syscall 
and then use `try_to_get_page` function to process.
Else, the process will be exited immediately by `exit (-1)`.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

First, operating systems are highly performance sensitive, 
so we had better not use a lock for whole VM system, it greatly limit the
parallelism of the system. On the other hand, using many locks complicates 
synchronization and raises the possibility for deadlock, so we use some 
individual locks and some global locks to solve this problem and these locks
are described as front questions(B5-B8).

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* thread.h */
struct thread
{
  ```
#ifdef VM
  sup_page_table sup_page_table;
  struct list mmap_list;
#endif
}

/* syscall.h */
struct mmap_entry
{
  mapid_t mmap_id;       /* Mmap identifier. */
  void *addr;            /* Maped memory starts at addr. */
  struct file *f;        /* f is mapped into memory. */
  int page_count;        /* Total page f occupies. */
  struct list_elem elem; /* List element for mmap list. */
};
---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

For each process, it keeps a list of memory mapped files. 
When a process is started, it initializes this list,
`mmap` and `munmap` are done through system calls.
`mmap` loads the file into memory and gets a mapid. 
`munmap` will free the memory and check if the 
corresponding pages are dirty, if they are, 
the page contents need to be written back to the file, 
otherwise, it just frees the pages. When a process exits, 
it will release all its memory mapped files. And when the 
page eviction happens on mapped page, it will be written back
to the file and not be save into swap partition depending on
the dirty bit.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before mapping, check whether the range of pages mapped overlaps 
any existing set of mapped pages first. 
Only after checking that no overlap happen, will it start mapping.
If there is a overlap, return `MAP_FAILED`.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We share the relation code because both of them are loading 
from files and calling `lazy_load_segment`.
Not only can it facilitate coding, but it can also improve code readability.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
